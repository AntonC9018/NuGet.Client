parameters:
  - name: stageName
    type: string
  - name: stageDisplayName
    type: string
  - name: dependsOn
    type: object
  - name: bootstrapperUrl
    type: string
  - name: runSettingsURI
    type: string
  - name: DartLabEnvironment
    type: string
  - name: condition
    type: string
  - name: variables
    type: object
  - name: testExecutionJobTimeoutInMinutes
    type: number
  - name: testMachineCleanUpStrategy
    type: string
    default: delete
    values:
      - delete
      - stop

stages:
  - template: stages\visual-studio\base.yml@DartLabTemplates
    parameters:
      name: ${{parameters.stageName}}
      displayName: ${{parameters.stageDisplayName}}
      condition: ${{parameters.condition}}
      dependsOn: ${{parameters.dependsOn}}
      testMachineDeploymentJobTimeoutInMinutes: 240
      testExecutionJobTimeoutInMinutes: ${{parameters.testExecutionJobTimeoutInMinutes}}
      variables:
        - name: bootstrapperUrl
          value: ${{parameters.bootstrapperUrl}}
        - name: runSettingsURI
          value: ${{parameters.runSettingsURI}}
        - ${{parameters.variables}}
      visualStudioBootstrapperURI: $(bootstrapperUrl)
      visualStudioInstallationParameters: $(VisualStudio.InstallationUnderTest.SetupParameters)
      testLabPoolName: VS-Platform
      dartLabEnvironment: ${{parameters.DartLabEnvironment}}
      visualStudioSigning: Test
      testMachineCleanUpStrategy: ${{parameters.testMachineCleanUpStrategy}}
      preTestMachineConfigurationStepList:
        - task: PowerShell@2
          displayName: Set 'VisualStudio.InstallationUnderTest.SetupParameters'
          inputs:
            filePath: $(DartLab.Path)\Scripts\VisualStudio\Installation\Get-VisualStudioSetupParameters.ps1
            arguments: -RunSettingsURI '$(runSettingsURI)' -InstallPath 'C:\Test\VisualStudio' -NoRestart -Quiet -Wait -OutVariableName 'VisualStudio.InstallationUnderTest.SetupParameters'

      deployAndRunTestsStepList:
        - task: PowerShell@1
          displayName: "Print Environment Variables"
          inputs:
            scriptType: "inlineScript"
            inlineScript: |
              Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

        - task: DownloadBuildArtifacts@0
          displayName: "Download Build artifacts"
          inputs:
            artifactName: "VS15"
            downloadPath: "$(Build.Repository.LocalPath)/artifacts"

        - task: MSBuild@1
          displayName: "Bootstrap NuGet packages"
          inputs:
            solution: "build\\bootstrap.proj"
            configuration: "$(BuildConfiguration)"
            msbuildArguments: "/t:Restore"

        - task: PowerShell@1
          displayName: "SetupFunctionalTests.ps1"
          inputs:
            scriptName: "$(System.DefaultWorkingDirectory)/scripts/e2etests/SetupFunctionalTests.ps1"

        - task: NuGetCommand@2
          displayName: "Add Apex Feed Source"
          inputs:
            command: "custom"
            arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

        - task: MSBuild@1
          displayName: "Restore Apex Tests"
          inputs:
            solution: "build\\build.proj"
            configuration: "$(BuildConfiguration)"
            # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
            msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"

        - task: MSBuild@1
          displayName: "Run Apex Tests (continue on error)"
          timeoutInMinutes: 120
          continueOnError: "true"
          inputs:
            solution: "build\\build.proj"
            configuration: "$(BuildConfiguration)"
            # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
            msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"
            maximumCpuCount: true
          condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

        - task: MSBuild@1
          displayName: "Run Apex Tests (stop on error)"
          timeoutInMinutes: 120
          continueOnError: "false"
          inputs:
            solution: "build\\build.proj"
            configuration: "$(BuildConfiguration)"
            # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
            msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"
            maximumCpuCount: true
          condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

        - task: PublishTestResults@2
          displayName: "Publish Test Results"
          inputs:
            testRunner: "XUnit"
            testResultsFiles: "*.xml"
            searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
            mergeTestResults: "true"
            testRunTitle: "NuGet.Client Apex Tests On Windows"
          condition: "succeededOrFailed()"

        - task: PowerShell@1
          displayName: "Initialize Git Commit Status on GitHub"
          inputs:
            scriptType: "inlineScript"
            inlineScript: |
              . $(System.DefaultWorkingDirectory)\\scripts\\utils\\PostGitCommitStatus.ps1
              SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "$(GitHubStatusName)"
          condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"
